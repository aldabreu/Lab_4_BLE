/**
  Headerfile:       SensorTag.h


  Revised:        $Date: 2015-4-10   (Thur, 10 Apr 2015) $
  Revision:       $Revision: 1 $
  Author: Alexander D'Abreu
  Description:    SensorTag application to manage device connections and Sensor Readings.

**************************************************************************************************/
#ifndef SENSORTAG_H_
#define SENSORTAG_H_

/*********************************************************************
 * INCLUDES
 */
#include "Scheduler.h"
#include "BLE_HCI.h"

/*********************************************************************
 * CONSTANTS
 */

//Event Flags
#define SENSORTAG_DEV_DISC_EVT		BIT0
#define SENSORTAG_CONN_CHECK_EVT 	BIT1
#define SENSORTAG_DATA_CHECK_EVT 	BIT2
#define GPS_CONN_CHECK_EVT 			BIT3
#define GPS_DATA_CHECK_EVT 			BIT4


//Timer Constants
#define SENSORTAGDATA_TIMERAMT			760		//2 Second Delay
#define SENSORTAGCONNECTION_TIMERAMT	1900	//5 Second Delay



//For data check -> in BLE RX of data set flag in Device DB
//Every n seconds reset the flag and see if its set again
//If not every N seconds resend commands to set up data transmission again

#define OPCODE_LSB_INDEX	0
#define OPCODE_MSB_INDEX	1
#define CMD_DATA_INDEX		2





/*********************************************************************
 * TYPEDEFS
 */


/*********************************************************************
 * System Events
 */

/*********************************************************************
 * Global System Messages
 */

/*********************************************************************
 * MACROS
 */



/*********************************************************************
 * GLOBAL VARIABLES
 */


/*********************************************************************
 * FUNCTIONS
 */

/*
* SensotTag Event processing function.
	*/
extern uint8 SensorTag_ProcessEvent(uint8 taskId,uint8 events);

/*
* SensorTag Initialization function to set up the empty device database.
	*/
extern void SensorTag_Init(void);

extern void masterDeviceInit(void);
extern void authenticateDevice(uint8 connectedDeviceIndex);
extern void startDeviceDiscovery(void);
extern void establishDeviceLink(uint8 devIndex);
extern void authenticateDevice(uint8 connectedDeviceIndex);
extern void writeCharValue(uint8 deviceIndex,uint8 *attrHandle,uint8 dataLen,uint8 *data);
extern void readCharByUUID(uint8 deviceIndex,uint8 *UUID);





/*
* Helper function to compare two array's.
	*/
extern uint8 compareArray(uint8 *arr1,uint8 *arr2,uint8 length);

/*
* Searches the device database for a specific device by the device address.
	*/
//extern PBLEDevice_s *findDevice(uint8 * devAddr, uint8 *connHandle);


/*
* Copies bytes from one memory location to another.
	*/
extern void copyArr(uint8 *src,uint8 *dst,uint8 src_start,uint8 src_end,uint8 dst_start);
/*********************************************************************
*********************************************************************/



#endif /* SENSORTAG_H_ */


