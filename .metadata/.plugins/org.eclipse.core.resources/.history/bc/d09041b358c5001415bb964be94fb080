#include <msp430.h>
#include "Mem_Manager.h"
#include "taskScheduler.h"
#include "UART_HCI.h"

//Static Global Definitions for Main ISR's
   //--------------------------------------------------------------
	static RingBuffer_s *UART_A_RXCircBuf;
	static RingBuffer_s *UART_A_TXCircBuf;
	static RingBuffer_s *UART_B_RXCircBuf;
	static RingBuffer_s *UART_B_TXCircBuf;

#define UARTTXINT 4
#define UARTRXINT 2

#define CMDPKT 0x01
#define DATAPKT 0x02
#define EVTPKT 0x04

 //---------------------------------------------------------------

void main(void) {
	WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer

	osal_mem_init();

	//Initialize UART RX TX Buffers
	UART_A_RXCircBuf = initializeBuffer(RXBUFFER_INIT);
	UART_A_TXCircBuf = initializeBuffer(TXBUFFER_INIT);
	UART_B_RXCircBuf = initializeBuffer(RXBUFFER_INIT);
	UART_B_TXCircBuf = initializeBuffer(TXBUFFER_INIT);

	//Call  scheduler_start_system() , in Scheduler
	//Place memory kick in scheduler .cpp!!!!!!!!!!!!!!!!!!After memory initialization****




	  osal_mem_kick();
/*---------------------------------------------------------------------
Test Code Block
*/


/*
-----------------------------------------------------------------------
*/

	  P4SEL |= BIT4+BIT5;                       // P3.3,4 = USCI_A1 TXD/RXD
	  UCA1CTL1 |= UCSWRST;                      // **Put state machine in reset**
	  UCA1CTL1 |= UCSSEL_2;                     // SMCLK
	  UCA1BR0 = 9;                              // 1MHz 115200 (see User's Guide)
	  UCA1BR1 = 0;                              // 1MHz 115200
	  UCA1MCTL |= UCBRS_1 + UCBRF_0;            // Modulation UCBRSx=1, UCBRFx=0
	  UCA1CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
	  UCA1IE |= UCRXIE;                         // Enable USCI_A1 RX interrupt



		_bis_SR_register(LPM0_bits + GIE);




		while(1);
}


// Vector 0 - no interrupt
// Vector 2 - RXIFG
// Vector 4 - TXIFG

#pragma vector=USCI_A1_VECTOR
__interrupt void USCI_A1_ISR(void)
{

	//Number of bytes either received or transmitted
		 static uint8 TxByteCtr = 0;
		 static uint8 RxByteCtr = 0;

	//Index of Buffer currently being used
		 static uint8 currTxBuf = 0;
		 static uint8 currRxBuf = 0;
	//Index of end of data
		// static uint8 RxPktEnd = BUFFERSIZE;
		 static uint8 RxPktEnd = 44;
		 static uint8 TxPktEnd = 0;

	//Status of adding to a buffer
		 uint8 addStatus = SUCCESS;
		 volatile uint8 rxByte = 0;

		 uint8 pktLenIndex = 0;







}

