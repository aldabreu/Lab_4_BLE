/**************************************************************************************************
  Filename:       SensorTag.c
  Revised:        $Date: 2015-4-10   (Thur, 10 Apr 2015) $
  Revision:       $Revision: 1 $

  Description:    GAP Peripheral Role

**************************************************************************************************/

/*********************************************************************
 * INCLUDES
 */
#include "SensorTag.h"


/*********************************************************************
 * MACROS
 */

/*********************************************************************
 * CONSTANTS
 */


/*********************************************************************
 * TYPEDEFS
 */


/*********************************************************************
 * GLOBAL VARIABLES
 */



/*********************************************************************
 * EXTERNAL VARIABLES
 */

/*********************************************************************
 * EXTERNAL FUNCTIONS
 */

/*********************************************************************
 * LOCAL VARIABLES Static
 */





void masterDeviceInit(void)
{
	cmdPkt_Gen_s *tempMsg = osal_mem_alloc(sizeof(cmdPkt_Gen_s));
	//Add OpCode for BLE Device Init command
	tempMsg->opCode[0] = 0xFE;
	tempMsg->opCode[1] = 0x00;

	//No Extra data necessary
	tempMsg->pData = NULL;

	//Send Message
	scheduler_send_Msg(BLE_TASK_ID,GAP_CMD_EVT,(void*)tempMsg);
	//Set Event
	scheduler_set_Evt(BLE_TASK_ID,GAP_CMD_EVT);

}
void startDeviceDiscovery(void)
{
	cmdPkt_Gen_s *tempMsg = osal_mem_alloc(sizeof(cmdPkt_Gen_s));
	tempMsg->opCode[0] = 0xFE;
	tempMsg->opCode[1] = 0x04;


	tempMsg->pData = NULL;

	scheduler_send_Msg(BLE_TASK_ID,GAP_CMD_EVT,(void*)tempMsg);
	//Set Event
	scheduler_set_Evt(BLE_TASK_ID,GAP_CMD_EVT);

}






/*********************************************************************
 * @fn          SensorTag_ProcessEvent
 *
 * @brief
 * 		 This is the event handler function for checking the connection status to the sensorTags.
 *
 * @params 	uint8 taskId
 * 			uint8 events
 *
 * @return uint8 events - Tasks that still need processing
 *
 *  */
uint8 SensorTag_ProcessEvent(uint8 taskId,uint8 events){
/*
	switch(events)
	{
	case GAP_EVT_EVT:{}break;



		};

		//Deallocate memory from calling function/event, Not all functions send data
		if(tempMsg->pData != NULL)
			osal_mem_free((void*)tempMsg->pData);

		osal_mem_free((void*)tempMsg);

		if(ERRORFLAG == SUCCESS)
		{
			scheduler_send_Msg(UART_TASK_ID,UART_A_TX_EVT,(void*)cmdData);	//Set UART TX Event
			scheduler_set_Evt(UART_TASK_ID,UART_A_TX_EVT);
		}








		//Mask out completed events
	 if(getQueueLength(taskId,events) == 0)
		 events &= ~GATT_CMD_EVT;






	}break;


	};

*/
	return events;
}
/*********************************************************************
 * @fn         SensorTag_Init
 *
 * @brief
 * 		 This function initializes the SensorTag's by setting up bonding events.
 *
 * @params 	void
 *
 * @return VOID
 *
 *  */
void SensorTag_Init(void)
{







}

