/**************************************************************************************************
  Filename:       UART_HCI.c
  Revised:        $Date: 2015-03-01 (Sun, 1 Mar 2015) $
  Revision:       $Revision: 35416 $

  Description:    UART Host Controller Interface between MSP430F5529 and CC2540

**************************************************************************************************/

/*********************************************************************
 * INCLUDES
 */
#include "UART_HCI.h"
/*********************************************************************
 * MACROS
 */

#define NUMOFBUFFERS 4
#define BUFFERSIZE 30
#define RXBUFFER_INIT 1
#define TXBUFFER_INIT 0

#define isBuffFull(LinBuff) ((LinBuff.dataEnd) == BUFFERSIZE)
#define isBuffEmpty(LinBuff) ((LinBuff.dataEnd) == 0)
#define isBuffInRange(BuffVal) ((BuffVal) < NUMOFBUFFERS)

/*********************************************************************
 * CONSTANTS
 */


/*********************************************************************
 * TYPEDEFS
 */

typedef struct
{
	uint8 *linBuffer;//[BUFFERSIZE]
	uint8 isInUse; //Boolean true of false
	uint8 dataEnd; //End of Valid Data

}LinearBuffer_s;


typedef struct
{
	LinearBuffer_s *circBuffer[NUMOFBUFFERS]; //The Actual Circular Buffer is an array of pointers
	uint8 length;	//Length of the circular Array

}RingBuffer_s;



/*********************************************************************
 * GLOBAL VARIABLES
 */

/*********************************************************************
 * EXTERNAL VARIABLES
 */

/*********************************************************************
 * EXTERNAL FUNCTIONS EXT
 */

/*********************************************************************
 * LOCAL VARIABLES Static
 */

/*********************************************************************
 * PUBLIC FUNCTIONS
 */


/*********************************************************************
 * @fn          initializeBuffer
 *
 * @brief       Allocates Memory on the Heap for the a Circular Buffer
 *
 * @params uint8 RxBuffer  - Type of Buffer to create RXBUFFER or TXBUFFER(1 or 0)
 *
 * @return RingBuffer_s newBuffer  -    Pointer to the newly allocated Buffer
 */

RingBuffer_s * initializeBuffer(uint8 RXBuffer)
{
	//Create memory blocks for both circular and Linear Buffers
	RingBuffer_s *inputBuffer;
	uint8 currBuffer;

	inputBuffer = (RingBuffer_s*)osal_mem_alloc(sizeof(RingBuffer_s));
	inputBuffer->length = NUMOFBUFFERS;

	//Allocate memory for the LinearBuffer structure and internal Buffer(array)
	for(currBuffer = 0; currBuffer < NUMOFBUFFERS;currBuffer++)
	{
		inputBuffer->circBuffer[currBuffer] = (LinearBuffer_s *)osal_mem_alloc(sizeof(LinearBuffer_s));

		if(RXBuffer)	//Do not allocate Linear Array for Transmit Buffers
			inputBuffer->circBuffer[currBuffer]->linBuffer = (uint8 *)osal_mem_alloc(BUFFERSIZE * sizeof(uint8));
		else
			inputBuffer->circBuffer[currBuffer]->linBuffer = NULL;

		//Initialize internal Buffer
		inputBuffer->circBuffer[currBuffer]->isInUse = 0; //Reset all flags
		inputBuffer->circBuffer[currBuffer]->dataEnd = 0; //Initially empty arrays

		/*for(i = 0; i < inputBuffer->circBuffer[currBuffer]->dataEnd;i++)
			inputBuffer->circBuffer[currBuffer]->linBuffer[i] = 'A';
			*/
	}
	return inputBuffer;
}

/*********************************************************************
 * @fn          addToBuffer
 *
 * @brief       Adds a byte to a linear array in the circular Buffer
 *
 * @params 	RingBuffer_s - input Buffer to be added to
 * 			uint8 currBuffer - Linear Buffer to add Byte
 * 			uint8 byteInput - Byte to add
 *
 * @return uint8 STATUS - SUCCESS or FAILURE
 */
uint8 addToBuffer(RingBuffer_s *inputBuffer,uint8 currBuffer,uint8 byteInput)
{
	//Check if current buffer selection is in range
	if(!(isBuffInRange(currBuffer)))
		return FAILURE;


	//Check for Valid inputBuffer
	if((inputBuffer != NULL) && (inputBuffer->circBuffer[currBuffer] != NULL) && (inputBuffer->circBuffer[currBuffer]->linBuffer != NULL))
	{
		//Check to see if the Buffer wanting to be used is in-use by another portion of the application
		if (!(inputBuffer->circBuffer[currBuffer]->isInUse))
		{
			//Check if the internal Buffer attempting to be written to is full
			if(isBuffFull((*(inputBuffer->circBuffer[currBuffer]))))
				return FAILURE;

			else{
					inputBuffer->circBuffer[currBuffer]->linBuffer[(inputBuffer->circBuffer[currBuffer]->dataEnd)] = byteInput;

					inputBuffer->circBuffer[currBuffer]->dataEnd++;
					return SUCCESS;
				}
		}
	}
		return FAILURE;
}


/*********************************************************************
 * @fn          removeFromBuffer
 *
 * @brief       Remove a byte from a linear array in the circular Buffer
 *
 * @params 	RingBuffer_s - Input buffer to be removed from
 * 			uint8 currBuffer - Linear Buffer to add Byte
 * 			uint8 byteLocationt - Reference of byte to store removal
 *
 * @return uint8 STATUS - SUCCESS or FAILURE
 */
void random();







/**************************************************************************************************
 * @fn          FUNCTION NAME
 *
 * @brief       This function ...
 *
 * input parameters
 *
 * INPUT PARAMS
 *
 * output parameters
 *
 * OUTPUT PARAMS
 *
 * @return     RETURN EXPLANATION
 */
