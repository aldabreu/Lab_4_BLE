/**
  Headerfile:       GAP_HCI.h


  Revised:        $Date: 2015-3-21   (Sun, 1 Mar 2015) $
  Revision:       $Revision: 1 $
  Author: Alexander D'Abreu
  Description:    GAP and GATT BLE commands and event processing functions.

**************************************************************************************************/
#ifndef BLE_HCI_H_
#define BLE_HCI_H_

/*********************************************************************
 * INCLUDES
 */
#include "Scheduler.h"
#include "SensorTag.h"

/*********************************************************************
 * CONSTANTS
 */
//Event Flags
#define GAP_EVT_EVT 	BIT0
#define GAP_CMD_EVT 	BIT1
#define GATT_EVT_EVT 	BIT2
#define GATT_CMD_EVT 	BIT3


#define NUMOFDEVICES 	0x04
#define CMDHDRLEN 		0x04


//GAP Event OPCodes(Low Byte) - 0x06XX
#define GAP_DeviceInitDone			0x00
#define GAP_DeviceDiscovery			0x01
#define GAP_LinkEstablished			0x05
#define GAP_LinkTerminated			0x06
#define GAP_SignatureUpdated		0x09
#define GAP_DeviceInformation		0x0D
#define	GAP_PassKeyNeeded 			0x0B
#define	GAP_BondComplete			0x0E
#define GAP_AuthenticationComplete 	0x0A
#define GAP_CommandStatus			0x7F

//GATT Event OpCodes(LowByte) - 0x05XX
#define ATT_ReadByTypeRsp			0x09
#define	ATT_WriteRsp				0x13
#define	ATT_HandleValueNotification	0x1B




//GAP CMD OpCodes(LowByte) 0xFEXX
#define GAP_DeviceInit				0x00
#define GAP_DeviceDiscoveryRequest	0x04
#define GAP_DeviceDiscoveryCancel	0x05
#define GAP_EstablishLinkRequest	0x09
#define GAP_TerminateLinkRequest	0x0A
#define GAP_Authenticate			0x0B
#define GAP_PasskeyUpdate			0x0C
#define GAP_Bond					0x0F
#define	GAP_GetParam				0x31


//GATT CMD OpCodes(LowByte) - 0xFDXX
#define	GATT_ReadUsingCharUUID		0xB4
#define GATT_WriteCharValue			0x92




//Indexes for GATT Attribute Handles
#define ACCELHANDLEINDEX	0x03
#define MAGHANDLEINDEX		0x05
#define GYROHANDLEINDEX		0x08





#define READYTOSENDGAP 0x00
#define READYTOSENDGATT 0x01
#define NOTREADYTOSENDGAP 0x02
#define NOTREADYTOSENDGATT 0x03

//GAP Connection States
#define GAP_FREEDEVICE 			0x02
#define GAP_CONNECTEDDEVICE 	0x03
//#define GAP_DISCONNECTEDDEVICE	0x04
#define GAP_PAIREDDEVICE		0x05
#define GAP_BONDEDDEVICE		0x06
#define GAP_DISCOVEREDDEVICE	0x07

//Data Transmission States
#define TRANSMISSION_ACTIVE		0x02
#define TRANSMISSION_INACTIVE	0x03



//Command Error Status Codes
#define INVALIDPARAMETER			0x02
#define INVALID_TASK				0x03
#define MSG_BUFFER_NOT_AVAIL		0x04
#define INVALID_MSG_POINTER			0x05
#define INVALID_EVENT_ID			0x06
#define INVALID_INTERRUPT_ID		0x07
#define NO_TIMER_AVAIL				0x08
#define NV_ITEM_UNINIT				0x09
#define NV_OPER_FAILED				0x0A
#define INVALID_MEM_SIZE			0x0B
#define NV_BAD_ITEM_LEN				0x0C
#define bleNotReady					0x10
#define bleAlreadyInRequestedMode	0x11
#define bleIncorrectMode			0x12
#define bleMemAllocError			0x13
#define bleNotConnected				0x14
#define bleNoResources				0x15
#define blePending					0x16
#define bleTimeout 					0x17
#define bleInvalidRange				0x18
#define bleLinkEncrypted			0x19
#define bleProcedureComplete		0x1A
#define bleGAPUserCanceled 			0x30
#define bleGAPConnNotAcceptable		0x31
#define bleGAPBondRejected			0x32
#define bleInvalidPDU 				0x40
#define bleInsufficientAuthen		0x41
#define bleInsufficientEncrypt 		0x42
#define bleInsufficientKeySize 		0x43
#define INVALID_TASK_ID 			0xFF




//GAP Event Types
#define ConnectableUndirectedAdv	0x00
#define ConnectableDirectedAdv		0x01
#define DiscoverableUndirectedAdv	0x02
#define NONConnectableUndirectedAdc 0x03
#define ScanResponse				0x04

//GAP Address Types
#define ADDRTYPE_PUBLIC				0x00
#define ADDRTYPE_STATIC				0x01
#define ADDRTYPE_PRIVATE_NONRESOLVE 0x02
#define ADDRTYPE_PRIVATE_RESOLVE	0x03
#define INVALIDCONNHANDLE			0x10




/*********************************************************************
 * TYPEDEFS
 */

//Master BLE device data
typedef struct{
	uint8 deviceState;
	uint8 numOfConnectedDevices;
	uint8 *devAddr;
	uint8 *connHandle;
    uint8 *IRK;
    uint8 *CSRK;
}MBLEDevice_s;

//Peripheral BLE Device data
typedef struct{
	uint8 GAPState;
	uint8 DataState;
	uint8 *devAddr;
	uint8 *connHandle;

	uint8 addrType;
	uint8 advEvtType;
	uint8 rssi;
	uint8 dataLen;
	uint8 *dataField;	//From Scan response

	uint8 *LTK;
	uint8 *LTK_DIV;
	uint8 *LTK_RAND;


}PBLEDevice_s;



//GAP Command Structures
typedef struct{
	//OpCode - 0xFE00
	uint8 profileRole;
	uint8 maxScanResponses;
	uint8 IRK[16];
	uint8 CSRK[16];
	uint8 signCounter[4];
	//Return Value - CMD Status EVT

}GAP_DeviceInitCMD_s;

typedef struct{
	//OpCode - 0xFE04
	uint8 mode;
	uint8 activeScan;
	uint8 whiteList;
	//Return Value - CMD Status
	//GAP Device Information Events
	//GAP Device Discovery Event

}GAP_DeviceDiscoveryRequestCMD_s;

/*
typedef struct{
	//OpCode - 0xFe05
	//No Parameters
	//Return Value - CMD Status EVT

}GAP_DeviceDiscoveryCancelCMD_s;
*/
typedef struct{
	//OpCode - 0xFE09
	uint8 highDutyCycle;
	uint8 whiteList;
	uint8 addrTypePeer;
	uint8 peerAddr[6]; //LSB FIRST

	//Return Value - CMD Status
	//GAP Link Established Event
}GAP_EstablishLinkRequestCMD_s;


typedef struct{
	//OpCode - 0xFE0A
	uint8 connHandle[2];
	uint8 reason;

	//Return Value - CMD Status
	//GAP Link Terminated Event
	//GAP Device Discovery Event

}GAP_TerminateLinkRequestCMD_s;

typedef struct{
	//OpCode - 0xFE0B
	uint8 connHandle[2];
	uint8 secReq_ioCaps;
	uint8 secReq_oobAvailable;
	uint8 secReq_oob[16];
	uint8 secReq_authReq;
	uint8 secReq_maxEntKeySize;
	uint8 secReq_keyDist;

	uint8 pariReq_Enable;
	uint8 pariReq_ioCaps;
	uint8 pariReq_oobDataFlag;
	uint8 pariReq_authReq;
	uint8 pariReq_maxEncKeySize;
	uint8 pariReq_keyDist;



	//Return Value - CMD Status
	//GAP Authentication Complete Event
	//*GAP PasskeyNeeded Event

}GAP_AuthenticateCMD_s;


typedef struct{
	//OpCode - 0xFE0C
	uint8 connHandle[2];
	uint8 passkey[6];

	//Return Value - CMD Status

}GAP_PasskeyUpdateCMD_s;


typedef struct{
	//OpCode - 0xFE0F
	uint8 connHandle[2];
	uint8 authenticated;
	uint8 LTK[16];
	uint8 DIV[2];
	uint8 rand[8];
	uint8 LTKSize;

	//Return Value - CMD Status
	//GAP Bond complete Event
}GAP_BondCMD_s;


typedef struct{
	//OpCode - 0xFE0A
	uint8 paramID;

	//Param Value - 2 Bytes
	//Return Value - CMD Status

}GAP_getParamCMD_s;

//GATT Commands
typedef struct{
	//OpCode - 0xFDB4
	uint8 connHandle[2];
	uint8 startHandle[2];
	uint8 endHandle[2];
	uint8 UUID[2];

	//Return Value - CMD Status
}GATT_ReadUsingCharUUIDCMD_s;


typedef struct{
	//OpCode - 0xFD92
	uint8 connHandle[2];
	uint8 handle[2];
	uint8 *value;

	//Return Value - CMD Status

}GATT_WriteCharValueCMD_s;





/*********************************************************************
 * System Events
 */

/*********************************************************************
 * Global System Messages
 */

/*********************************************************************
 * MACROS
 */



/*********************************************************************
 * GLOBAL VARIABLES
 */
extern MBLEDevice_s bleMaster;
extern PBLEDevice_s *bleDeviceDB[NUMOFDEVICES];

extern uint8 commandStatusGATT;
extern uint8 commandStatusGAP;
/*********************************************************************
 * FUNCTIONS
 */

/*
* BLE Event processing function.
	*/
extern uint8 BLE_ProcessEvent(uint8 taskId,uint8 events);
/*
* Function to update the sensorTag device database.
	*/
extern void updateDeviceDB(uint8 GAPState,uint8 CMDStatus,uint8 *devAddr,uint8 *connHandle,uint8 *LTK,
		uint8 dataLen, uint8 *data,uint8 rssi,uint8 advEvtType,uint8 addrType,uint8 *LTK_DIV, uint8 *LTK_RAND);
/*
* Helper function to compare two array's.
	*/
extern uint8 compareArray(uint8 *arr1,uint8 *arr2,uint8 length);

/*
* Searches the device database for a specific device by the device address.
	*/
extern PBLEDevice_s *findDevice(uint8 * devAddr, uint8 *connHandle);

/*
* Adds new sensorTag data to the device database.
	*/
extern PBLEDevice_s *addNewDevice(uint8 * devAddr);

/*
* BLE Initialization function to set up the empty device database.
	*/
extern void BLE_Init(void);

/*
* Error status handler for the BLE Task.
	*/
extern void errorStatusHdr(uint8 statusCode);

/*
* Copies bytes from one memory location to another.
	*/
extern void copyArr(uint8 *src,uint8 *dst,uint8 src_start,uint8 src_end,uint8 dst_start);
/*********************************************************************
*********************************************************************/



#endif /* BLE_HCI_H_ */


